import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import numpy as np
import re
import string
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import joblib

# T·∫£i c√°c c√¥ng c·ª• NLP
nltk.download('punkt')
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))

# H√†m ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n
def clean_text(text):
    text = text.lower()
    text = re.sub(r'\d+', '', text)
    text = text.translate(str.maketrans('', '', string.punctuation))
    tokens = word_tokenize(text)
    tokens = [word for word in tokens if word not in stop_words]
    return " ".join(tokens)

# Load m√¥ h√¨nh v√† vectorizer
rf_model = joblib.load('random_forest_model.pkl')
nb_model = joblib.load('naive_bayes_model.pkl')
dt_model = joblib.load('decision_tree_model.pkl')
vectorizer = joblib.load('tfidf_vectorizer.pkl')

# H√†m d·ª± ƒëo√°n email
def predict_email(email_content, algorithm):
    # Ti·ªÅn x·ª≠ l√Ω email
    cleaned_email = clean_text(email_content)
    vectorized_test_email = vectorizer.transform([cleaned_email])

    # L·ª±a ch·ªçn m√¥ h√¨nh d·ª±a tr√™n thu·∫≠t to√°n
    selected_model = None
    if algorithm == 'Random Forest':
        selected_model = rf_model
    elif algorithm == 'Naive Bayes':
        selected_model = nb_model
    else:  # Decision Tree
        selected_model = dt_model

    # Th·ª±c hi·ªán d·ª± ƒëo√°n
    prediction = selected_model.predict(vectorized_test_email)[0]
    probability = selected_model.predict_proba(vectorized_test_email)[0][1]
    return prediction, probability

# H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t "D·ª± ƒëo√°n Email"
def on_predict_click():
    email_content = email_input.get("1.0", "end-1c").strip()  # L·∫•y n·ªôi dung t·ª´ Text widget
    if not email_content:
        messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p n·ªôi dung email ƒë·ªÉ ki·ªÉm tra!")
        return

    algorithm = algorithm_var.get()  # L·∫•y thu·∫≠t to√°n t·ª´ dropdown
    prediction, probability = predict_email(email_content, algorithm)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    result_text = f"üì© **K·∫øt qu·∫£ d·ª± ƒëo√°n ({algorithm}):**\n"
    if prediction == 1:
        result_text += f"üö® **SPAM!** (X√°c su·∫•t: {probability:.2%})"
    else:
        result_text += f"‚úÖ **Email an to√†n.** (X√°c su·∫•t spam: {probability:.2%})"
    result_label.config(text=result_text)

# H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t "T·∫£i l√™n file"
def on_upload_click():
    file_path = filedialog.askopenfilename(filetypes=(("Text files", "*.txt"), ("All files", "*.*")))
    if file_path:
        with open(file_path, 'r', encoding='utf-8') as file:
            email_content = file.read()
            email_input.delete("1.0", "end")  # X√≥a n·ªôi dung c≈©
            email_input.insert("1.0", email_content)  # Ch√®n n·ªôi dung file

# H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t "H·ªßy file t·∫£i l√™n"
def on_cancel_click():
    email_input.delete("1.0", "end")  # X√≥a n·ªôi dung trong Text widget
    result_label.config(text="")  # X√≥a k·∫øt qu·∫£

# T·∫°o c·ª≠a s·ªï ch√≠nh
root = tk.Tk()
root.title("D·ª± ƒëo√°n Email Spam")

# T·∫°o dropdown ƒë·ªÉ ch·ªçn thu·∫≠t to√°n
algorithm_var = tk.StringVar(value="Random Forest")
algorithm_dropdown = tk.OptionMenu(root, algorithm_var, "Random Forest", "Naive Bayes", "Decision Tree")
algorithm_dropdown.pack(pady=10)

# T·∫°o n√∫t ƒë·ªÉ t·∫£i l√™n file
upload_button = tk.Button(root, text="T·∫£i l√™n file", command=on_upload_click)
upload_button.pack(pady=10)

# T·∫°o h·ªôp nh·∫≠p li·ªáu cho email
email_input = tk.Text(root, height=10, width=50)
email_input.pack(pady=10)

# T·∫°o n√∫t ƒë·ªÉ d·ª± ƒëo√°n
predict_button = tk.Button(root, text="D·ª± ƒëo√°n Email", command=on_predict_click)
predict_button.pack(pady=10)

# T·∫°o n√∫t h·ªßy file t·∫£i l√™n
cancel_button = tk.Button(root, text="H·ªßy file t·∫£i l√™n", command=on_cancel_click)
cancel_button.pack(pady=10)

# T·∫°o nh√£n ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
result_label = tk.Label(root, text="", font=("Arial", 12))
result_label.pack(pady=10)

# Ch·∫°y ·ª©ng d·ª•ng
root.mainloop()